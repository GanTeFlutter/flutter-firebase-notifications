// ignore_for_file: avoid_catches_without_on_clauses

import 'package:flutter/material.dart';
import 'package:flutter_base_start/product/service/services/firebase_fcm.dart';
import 'package:shared_preferences/shared_preferences.dart';

class HomeView extends StatefulWidget {
  const HomeView({super.key});

  @override
  State<HomeView> createState() => _HomeViewState();
}

class _HomeViewState extends State<HomeView> {
  String? lastMessageData;
  String? lastMessageTitle;
  String? lastMessageBody;
  String? lastMessageTime;
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadMessages();
  }

  Future<void> _loadMessages() async {
    setState(() => isLoading = true);

    try {
      // ‚≠ê Direkt SharedPreferences kullanƒ±n
      final prefs = await SharedPreferences.getInstance();

      lastMessageData = prefs.getString(PrefKeys.lastMessageData);
      lastMessageTitle = prefs.getString(PrefKeys.lastMessageTitle);
      lastMessageBody = prefs.getString(PrefKeys.lastMessageBody);
      lastMessageTime = prefs.getString(PrefKeys.lastMessageTime);

      debugPrint('üìñ ============ LOADING MESSAGES ============');
      debugPrint('Data: $lastMessageData');
      debugPrint('Title: $lastMessageTitle');
      debugPrint('Body: $lastMessageBody');
      debugPrint('Time: $lastMessageTime');
      debugPrint('============================================');

      // T√ºm key'leri g√∂rmek i√ßin:
      final allKeys = prefs.getKeys();
      debugPrint('üîë All SharedPreferences keys: $allKeys');
    } catch (e) {
      debugPrint('‚ùå Error loading messages: $e');
    } finally {
      if (mounted) {
        setState(() => isLoading = false);
      }
    }
  }

  Future<void> _testSave() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(
        PrefKeys.lastMessageTitle,
        'Test Ba≈ülƒ±k ${DateTime.now().second}',
      );
      await prefs.setString(
        PrefKeys.lastMessageBody,
        'Test G√∂vde ${DateTime.now().second}',
      );
      await prefs.setString(PrefKeys.lastMessageData, '{test: true}');
      await prefs.setString(
        PrefKeys.lastMessageTime,
        DateTime.now().toIso8601String(),
      );

      debugPrint('‚úÖ Test data saved');
      await _loadMessages();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Test verisi kaydedildi!')),
        );
      }
    } catch (e) {
      debugPrint('‚ùå Test save error: $e');
    }
  }

  Future<void> _clearMessages() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(PrefKeys.lastMessageData);
      await prefs.remove(PrefKeys.lastMessageTitle);
      await prefs.remove(PrefKeys.lastMessageBody);
      await prefs.remove(PrefKeys.lastMessageTime);

      debugPrint('üóëÔ∏è Messages cleared');
      await _loadMessages();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Mesajlar temizlendi!')),
        );
      }
    } catch (e) {
      debugPrint('‚ùå Clear error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('FCM Test'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadMessages,
            tooltip: 'Yenile',
          ),
        ],
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                spacing: 16,
                children: [
                  // Son Mesaj Kartƒ±
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'üì¨ Son Mesaj',
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const Divider(),
                          _InfoRow(
                            icon: Icons.data_object,
                            label: 'Data',
                            value: lastMessageData,
                          ),
                          _InfoRow(
                            icon: Icons.title,
                            label: 'Ba≈ülƒ±k',
                            value: lastMessageTitle,
                          ),
                          _InfoRow(
                            icon: Icons.message,
                            label: 'G√∂vde',
                            value: lastMessageBody,
                          ),
                          if (lastMessageTime != null)
                            _InfoRow(
                              icon: Icons.access_time,
                              label: 'Zaman',
                              value: lastMessageTime,
                            ),
                        ],
                      ),
                    ),
                  ),

                  // Test Butonlarƒ±
                  ElevatedButton.icon(
                    onPressed: _testSave,
                    icon: const Icon(Icons.bug_report),
                    label: const Text('Test Verisi Kaydet'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.all(16),
                    ),
                  ),

                  ElevatedButton.icon(
                    onPressed: _clearMessages,
                    icon: const Icon(Icons.delete_sweep),
                    label: const Text('Mesajlarƒ± Temizle'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.all(16),
                    ),
                  ),

                  // Bilgi Kartƒ±
                  Card(
                    color: Colors.amber.shade50,
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Row(
                            children: [
                              Icon(Icons.info_outline, color: Colors.amber),
                              SizedBox(width: 8),
                              Text(
                                'Test Adƒ±mlarƒ±',
                                style: TextStyle(fontWeight: FontWeight.bold),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          const Text('1. "Test Verisi Kaydet" butonuna basƒ±n'),
                          const Text('2. Mesaj g√∂r√ºn√ºyor mu kontrol edin'),
                          const Text('3. Firebase Console\'dan mesaj g√∂nderin'),
                          const Text('4. Uygulamayƒ± kapatƒ±n (kill edin)'),
                          const Text('5. Firebase\'den tekrar mesaj g√∂nderin'),
                          const Text('6. Uygulamayƒ± a√ßƒ±n ve kontrol edin'),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
    );
  }
}

class _InfoRow extends StatelessWidget {
  const _InfoRow({
    required this.icon,
    required this.label,
    required this.value,
  });

  final IconData icon;
  final String label;
  final String? value;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, size: 20, color: Colors.grey.shade600),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey.shade600,
                  ),
                ),
                Text(
                  value ?? 'Veri yok',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: value != null
                        ? FontWeight.w500
                        : FontWeight.normal,
                    color: value != null ? Colors.black : Colors.grey,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
